"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/graceful-fs";
exports.ids = ["vendor-chunks/graceful-fs"];
exports.modules = {

/***/ "(rsc)/./node_modules/graceful-fs/clone.js":
/*!*******************************************!*\
  !*** ./node_modules/graceful-fs/clone.js ***!
  \*******************************************/
/***/ ((module) => {

eval("\nmodule.exports = clone;\nvar getPrototypeOf = Object.getPrototypeOf || function(obj) {\n    return obj.__proto__;\n};\nfunction clone(obj) {\n    if (obj === null || typeof obj !== \"object\") return obj;\n    if (obj instanceof Object) var copy = {\n        __proto__: getPrototypeOf(obj)\n    };\n    else var copy = Object.create(null);\n    Object.getOwnPropertyNames(obj).forEach(function(key) {\n        Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key));\n    });\n    return copy;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JhY2VmdWwtZnMvY2xvbmUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEsT0FBT0MsT0FBTyxHQUFHQztBQUVqQixJQUFJQyxpQkFBaUJDLE9BQU9ELGNBQWMsSUFBSSxTQUFVRSxHQUFHO0lBQ3pELE9BQU9BLElBQUlDLFNBQVM7QUFDdEI7QUFFQSxTQUFTSixNQUFPRyxHQUFHO0lBQ2pCLElBQUlBLFFBQVEsUUFBUSxPQUFPQSxRQUFRLFVBQ2pDLE9BQU9BO0lBRVQsSUFBSUEsZUFBZUQsUUFDakIsSUFBSUcsT0FBTztRQUFFRCxXQUFXSCxlQUFlRTtJQUFLO1NBRTVDLElBQUlFLE9BQU9ILE9BQU9JLE1BQU0sQ0FBQztJQUUzQkosT0FBT0ssbUJBQW1CLENBQUNKLEtBQUtLLE9BQU8sQ0FBQyxTQUFVQyxHQUFHO1FBQ25EUCxPQUFPUSxjQUFjLENBQUNMLE1BQU1JLEtBQUtQLE9BQU9TLHdCQUF3QixDQUFDUixLQUFLTTtJQUN4RTtJQUVBLE9BQU9KO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oczExLy4vbm9kZV9tb2R1bGVzL2dyYWNlZnVsLWZzL2Nsb25lLmpzPzYwMDkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVcblxudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iai5fX3Byb3RvX19cbn1cblxuZnVuY3Rpb24gY2xvbmUgKG9iaikge1xuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnKVxuICAgIHJldHVybiBvYmpcblxuICBpZiAob2JqIGluc3RhbmNlb2YgT2JqZWN0KVxuICAgIHZhciBjb3B5ID0geyBfX3Byb3RvX186IGdldFByb3RvdHlwZU9mKG9iaikgfVxuICBlbHNlXG4gICAgdmFyIGNvcHkgPSBPYmplY3QuY3JlYXRlKG51bGwpXG5cbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29weSwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSlcbiAgfSlcblxuICByZXR1cm4gY29weVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJjbG9uZSIsImdldFByb3RvdHlwZU9mIiwiT2JqZWN0Iiwib2JqIiwiX19wcm90b19fIiwiY29weSIsImNyZWF0ZSIsImdldE93blByb3BlcnR5TmFtZXMiLCJmb3JFYWNoIiwia2V5IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/graceful-fs/clone.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/graceful-fs/graceful-fs.js":
/*!*************************************************!*\
  !*** ./node_modules/graceful-fs/graceful-fs.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar polyfills = __webpack_require__(/*! ./polyfills.js */ \"(rsc)/./node_modules/graceful-fs/polyfills.js\");\nvar legacy = __webpack_require__(/*! ./legacy-streams.js */ \"(rsc)/./node_modules/graceful-fs/legacy-streams.js\");\nvar clone = __webpack_require__(/*! ./clone.js */ \"(rsc)/./node_modules/graceful-fs/clone.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\n/* istanbul ignore next - node 0.x polyfill */ var gracefulQueue;\nvar previousSymbol;\n/* istanbul ignore else - node 0.x polyfill */ if (typeof Symbol === \"function\" && typeof Symbol.for === \"function\") {\n    gracefulQueue = Symbol.for(\"graceful-fs.queue\");\n    // This is used in testing by future versions\n    previousSymbol = Symbol.for(\"graceful-fs.previous\");\n} else {\n    gracefulQueue = \"___graceful-fs.queue\";\n    previousSymbol = \"___graceful-fs.previous\";\n}\nfunction noop() {}\nfunction publishQueue(context, queue) {\n    Object.defineProperty(context, gracefulQueue, {\n        get: function() {\n            return queue;\n        }\n    });\n}\nvar debug = noop;\nif (util.debuglog) debug = util.debuglog(\"gfs4\");\nelse if (/\\bgfs4\\b/i.test(process.env.NODE_DEBUG || \"\")) debug = function() {\n    var m = util.format.apply(util, arguments);\n    m = \"GFS4: \" + m.split(/\\n/).join(\"\\nGFS4: \");\n    console.error(m);\n};\n// Once time initialization\nif (!fs[gracefulQueue]) {\n    // This queue can be shared by multiple loaded instances\n    var queue = global[gracefulQueue] || [];\n    publishQueue(fs, queue);\n    // Patch fs.close/closeSync to shared queue version, because we need\n    // to retry() whenever a close happens *anywhere* in the program.\n    // This is essential when multiple graceful-fs instances are\n    // in play at the same time.\n    fs.close = function(fs$close) {\n        function close(fd, cb) {\n            return fs$close.call(fs, fd, function(err) {\n                // This function uses the graceful-fs shared queue\n                if (!err) {\n                    resetQueue();\n                }\n                if (typeof cb === \"function\") cb.apply(this, arguments);\n            });\n        }\n        Object.defineProperty(close, previousSymbol, {\n            value: fs$close\n        });\n        return close;\n    }(fs.close);\n    fs.closeSync = function(fs$closeSync) {\n        function closeSync(fd) {\n            // This function uses the graceful-fs shared queue\n            fs$closeSync.apply(fs, arguments);\n            resetQueue();\n        }\n        Object.defineProperty(closeSync, previousSymbol, {\n            value: fs$closeSync\n        });\n        return closeSync;\n    }(fs.closeSync);\n    if (/\\bgfs4\\b/i.test(process.env.NODE_DEBUG || \"\")) {\n        process.on(\"exit\", function() {\n            debug(fs[gracefulQueue]);\n            (__webpack_require__(/*! assert */ \"assert\").equal)(fs[gracefulQueue].length, 0);\n        });\n    }\n}\nif (!global[gracefulQueue]) {\n    publishQueue(global, fs[gracefulQueue]);\n}\nmodule.exports = patch(clone(fs));\nif (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs.__patched) {\n    module.exports = patch(fs);\n    fs.__patched = true;\n}\nfunction patch(fs) {\n    // Everything that references the open() function needs to be in here\n    polyfills(fs);\n    fs.gracefulify = patch;\n    fs.createReadStream = createReadStream;\n    fs.createWriteStream = createWriteStream;\n    var fs$readFile = fs.readFile;\n    fs.readFile = readFile;\n    function readFile(path, options, cb) {\n        if (typeof options === \"function\") cb = options, options = null;\n        return go$readFile(path, options, cb);\n        function go$readFile(path, options, cb, startTime) {\n            return fs$readFile(path, options, function(err) {\n                if (err && (err.code === \"EMFILE\" || err.code === \"ENFILE\")) enqueue([\n                    go$readFile,\n                    [\n                        path,\n                        options,\n                        cb\n                    ],\n                    err,\n                    startTime || Date.now(),\n                    Date.now()\n                ]);\n                else {\n                    if (typeof cb === \"function\") cb.apply(this, arguments);\n                }\n            });\n        }\n    }\n    var fs$writeFile = fs.writeFile;\n    fs.writeFile = writeFile;\n    function writeFile(path, data, options, cb) {\n        if (typeof options === \"function\") cb = options, options = null;\n        return go$writeFile(path, data, options, cb);\n        function go$writeFile(path, data, options, cb, startTime) {\n            return fs$writeFile(path, data, options, function(err) {\n                if (err && (err.code === \"EMFILE\" || err.code === \"ENFILE\")) enqueue([\n                    go$writeFile,\n                    [\n                        path,\n                        data,\n                        options,\n                        cb\n                    ],\n                    err,\n                    startTime || Date.now(),\n                    Date.now()\n                ]);\n                else {\n                    if (typeof cb === \"function\") cb.apply(this, arguments);\n                }\n            });\n        }\n    }\n    var fs$appendFile = fs.appendFile;\n    if (fs$appendFile) fs.appendFile = appendFile;\n    function appendFile(path, data, options, cb) {\n        if (typeof options === \"function\") cb = options, options = null;\n        return go$appendFile(path, data, options, cb);\n        function go$appendFile(path, data, options, cb, startTime) {\n            return fs$appendFile(path, data, options, function(err) {\n                if (err && (err.code === \"EMFILE\" || err.code === \"ENFILE\")) enqueue([\n                    go$appendFile,\n                    [\n                        path,\n                        data,\n                        options,\n                        cb\n                    ],\n                    err,\n                    startTime || Date.now(),\n                    Date.now()\n                ]);\n                else {\n                    if (typeof cb === \"function\") cb.apply(this, arguments);\n                }\n            });\n        }\n    }\n    var fs$copyFile = fs.copyFile;\n    if (fs$copyFile) fs.copyFile = copyFile;\n    function copyFile(src, dest, flags, cb) {\n        if (typeof flags === \"function\") {\n            cb = flags;\n            flags = 0;\n        }\n        return go$copyFile(src, dest, flags, cb);\n        function go$copyFile(src, dest, flags, cb, startTime) {\n            return fs$copyFile(src, dest, flags, function(err) {\n                if (err && (err.code === \"EMFILE\" || err.code === \"ENFILE\")) enqueue([\n                    go$copyFile,\n                    [\n                        src,\n                        dest,\n                        flags,\n                        cb\n                    ],\n                    err,\n                    startTime || Date.now(),\n                    Date.now()\n                ]);\n                else {\n                    if (typeof cb === \"function\") cb.apply(this, arguments);\n                }\n            });\n        }\n    }\n    var fs$readdir = fs.readdir;\n    fs.readdir = readdir;\n    var noReaddirOptionVersions = /^v[0-5]\\./;\n    function readdir(path, options, cb) {\n        if (typeof options === \"function\") cb = options, options = null;\n        var go$readdir = noReaddirOptionVersions.test(process.version) ? function go$readdir(path, options, cb, startTime) {\n            return fs$readdir(path, fs$readdirCallback(path, options, cb, startTime));\n        } : function go$readdir(path, options, cb, startTime) {\n            return fs$readdir(path, options, fs$readdirCallback(path, options, cb, startTime));\n        };\n        return go$readdir(path, options, cb);\n        function fs$readdirCallback(path, options, cb, startTime) {\n            return function(err, files) {\n                if (err && (err.code === \"EMFILE\" || err.code === \"ENFILE\")) enqueue([\n                    go$readdir,\n                    [\n                        path,\n                        options,\n                        cb\n                    ],\n                    err,\n                    startTime || Date.now(),\n                    Date.now()\n                ]);\n                else {\n                    if (files && files.sort) files.sort();\n                    if (typeof cb === \"function\") cb.call(this, err, files);\n                }\n            };\n        }\n    }\n    if (process.version.substr(0, 4) === \"v0.8\") {\n        var legStreams = legacy(fs);\n        ReadStream = legStreams.ReadStream;\n        WriteStream = legStreams.WriteStream;\n    }\n    var fs$ReadStream = fs.ReadStream;\n    if (fs$ReadStream) {\n        ReadStream.prototype = Object.create(fs$ReadStream.prototype);\n        ReadStream.prototype.open = ReadStream$open;\n    }\n    var fs$WriteStream = fs.WriteStream;\n    if (fs$WriteStream) {\n        WriteStream.prototype = Object.create(fs$WriteStream.prototype);\n        WriteStream.prototype.open = WriteStream$open;\n    }\n    Object.defineProperty(fs, \"ReadStream\", {\n        get: function() {\n            return ReadStream;\n        },\n        set: function(val) {\n            ReadStream = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(fs, \"WriteStream\", {\n        get: function() {\n            return WriteStream;\n        },\n        set: function(val) {\n            WriteStream = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // legacy names\n    var FileReadStream = ReadStream;\n    Object.defineProperty(fs, \"FileReadStream\", {\n        get: function() {\n            return FileReadStream;\n        },\n        set: function(val) {\n            FileReadStream = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    var FileWriteStream = WriteStream;\n    Object.defineProperty(fs, \"FileWriteStream\", {\n        get: function() {\n            return FileWriteStream;\n        },\n        set: function(val) {\n            FileWriteStream = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    function ReadStream(path, options) {\n        if (this instanceof ReadStream) return fs$ReadStream.apply(this, arguments), this;\n        else return ReadStream.apply(Object.create(ReadStream.prototype), arguments);\n    }\n    function ReadStream$open() {\n        var that = this;\n        open(that.path, that.flags, that.mode, function(err, fd) {\n            if (err) {\n                if (that.autoClose) that.destroy();\n                that.emit(\"error\", err);\n            } else {\n                that.fd = fd;\n                that.emit(\"open\", fd);\n                that.read();\n            }\n        });\n    }\n    function WriteStream(path, options) {\n        if (this instanceof WriteStream) return fs$WriteStream.apply(this, arguments), this;\n        else return WriteStream.apply(Object.create(WriteStream.prototype), arguments);\n    }\n    function WriteStream$open() {\n        var that = this;\n        open(that.path, that.flags, that.mode, function(err, fd) {\n            if (err) {\n                that.destroy();\n                that.emit(\"error\", err);\n            } else {\n                that.fd = fd;\n                that.emit(\"open\", fd);\n            }\n        });\n    }\n    function createReadStream(path, options) {\n        return new fs.ReadStream(path, options);\n    }\n    function createWriteStream(path, options) {\n        return new fs.WriteStream(path, options);\n    }\n    var fs$open = fs.open;\n    fs.open = open;\n    function open(path, flags, mode, cb) {\n        if (typeof mode === \"function\") cb = mode, mode = null;\n        return go$open(path, flags, mode, cb);\n        function go$open(path, flags, mode, cb, startTime) {\n            return fs$open(path, flags, mode, function(err, fd) {\n                if (err && (err.code === \"EMFILE\" || err.code === \"ENFILE\")) enqueue([\n                    go$open,\n                    [\n                        path,\n                        flags,\n                        mode,\n                        cb\n                    ],\n                    err,\n                    startTime || Date.now(),\n                    Date.now()\n                ]);\n                else {\n                    if (typeof cb === \"function\") cb.apply(this, arguments);\n                }\n            });\n        }\n    }\n    return fs;\n}\nfunction enqueue(elem) {\n    debug(\"ENQUEUE\", elem[0].name, elem[1]);\n    fs[gracefulQueue].push(elem);\n    retry();\n}\n// keep track of the timeout between retry() calls\nvar retryTimer;\n// reset the startTime and lastTime to now\n// this resets the start of the 60 second overall timeout as well as the\n// delay between attempts so that we'll retry these jobs sooner\nfunction resetQueue() {\n    var now = Date.now();\n    for(var i = 0; i < fs[gracefulQueue].length; ++i){\n        // entries that are only a length of 2 are from an older version, don't\n        // bother modifying those since they'll be retried anyway.\n        if (fs[gracefulQueue][i].length > 2) {\n            fs[gracefulQueue][i][3] = now // startTime\n            ;\n            fs[gracefulQueue][i][4] = now // lastTime\n            ;\n        }\n    }\n    // call retry to make sure we're actively processing the queue\n    retry();\n}\nfunction retry() {\n    // clear the timer and remove it to help prevent unintended concurrency\n    clearTimeout(retryTimer);\n    retryTimer = undefined;\n    if (fs[gracefulQueue].length === 0) return;\n    var elem = fs[gracefulQueue].shift();\n    var fn = elem[0];\n    var args = elem[1];\n    // these items may be unset if they were added by an older graceful-fs\n    var err = elem[2];\n    var startTime = elem[3];\n    var lastTime = elem[4];\n    // if we don't have a startTime we have no way of knowing if we've waited\n    // long enough, so go ahead and retry this item now\n    if (startTime === undefined) {\n        debug(\"RETRY\", fn.name, args);\n        fn.apply(null, args);\n    } else if (Date.now() - startTime >= 60000) {\n        // it's been more than 60 seconds total, bail now\n        debug(\"TIMEOUT\", fn.name, args);\n        var cb = args.pop();\n        if (typeof cb === \"function\") cb.call(null, err);\n    } else {\n        // the amount of time between the last attempt and right now\n        var sinceAttempt = Date.now() - lastTime;\n        // the amount of time between when we first tried, and when we last tried\n        // rounded up to at least 1\n        var sinceStart = Math.max(lastTime - startTime, 1);\n        // backoff. wait longer than the total time we've been retrying, but only\n        // up to a maximum of 100ms\n        var desiredDelay = Math.min(sinceStart * 1.2, 100);\n        // it's been long enough since the last retry, do it again\n        if (sinceAttempt >= desiredDelay) {\n            debug(\"RETRY\", fn.name, args);\n            fn.apply(null, args.concat([\n                startTime\n            ]));\n        } else {\n            // if we can't do this job yet, push it to the end of the queue\n            // and let the next iteration check again\n            fs[gracefulQueue].push(elem);\n        }\n    }\n    // schedule our next run if one isn't already scheduled\n    if (retryTimer === undefined) {\n        retryTimer = setTimeout(retry, 0);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/graceful-fs/graceful-fs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/graceful-fs/legacy-streams.js":
/*!****************************************************!*\
  !*** ./node_modules/graceful-fs/legacy-streams.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Stream = (__webpack_require__(/*! stream */ \"stream\").Stream);\nmodule.exports = legacy;\nfunction legacy(fs) {\n    return {\n        ReadStream: ReadStream,\n        WriteStream: WriteStream\n    };\n    function ReadStream(path, options) {\n        if (!(this instanceof ReadStream)) return new ReadStream(path, options);\n        Stream.call(this);\n        var self = this;\n        this.path = path;\n        this.fd = null;\n        this.readable = true;\n        this.paused = false;\n        this.flags = \"r\";\n        this.mode = 438; /*=0666*/ \n        this.bufferSize = 64 * 1024;\n        options = options || {};\n        // Mixin options into this\n        var keys = Object.keys(options);\n        for(var index = 0, length = keys.length; index < length; index++){\n            var key = keys[index];\n            this[key] = options[key];\n        }\n        if (this.encoding) this.setEncoding(this.encoding);\n        if (this.start !== undefined) {\n            if (\"number\" !== typeof this.start) {\n                throw TypeError(\"start must be a Number\");\n            }\n            if (this.end === undefined) {\n                this.end = Infinity;\n            } else if (\"number\" !== typeof this.end) {\n                throw TypeError(\"end must be a Number\");\n            }\n            if (this.start > this.end) {\n                throw new Error(\"start must be <= end\");\n            }\n            this.pos = this.start;\n        }\n        if (this.fd !== null) {\n            process.nextTick(function() {\n                self._read();\n            });\n            return;\n        }\n        fs.open(this.path, this.flags, this.mode, function(err, fd) {\n            if (err) {\n                self.emit(\"error\", err);\n                self.readable = false;\n                return;\n            }\n            self.fd = fd;\n            self.emit(\"open\", fd);\n            self._read();\n        });\n    }\n    function WriteStream(path, options) {\n        if (!(this instanceof WriteStream)) return new WriteStream(path, options);\n        Stream.call(this);\n        this.path = path;\n        this.fd = null;\n        this.writable = true;\n        this.flags = \"w\";\n        this.encoding = \"binary\";\n        this.mode = 438; /*=0666*/ \n        this.bytesWritten = 0;\n        options = options || {};\n        // Mixin options into this\n        var keys = Object.keys(options);\n        for(var index = 0, length = keys.length; index < length; index++){\n            var key = keys[index];\n            this[key] = options[key];\n        }\n        if (this.start !== undefined) {\n            if (\"number\" !== typeof this.start) {\n                throw TypeError(\"start must be a Number\");\n            }\n            if (this.start < 0) {\n                throw new Error(\"start must be >= zero\");\n            }\n            this.pos = this.start;\n        }\n        this.busy = false;\n        this._queue = [];\n        if (this.fd === null) {\n            this._open = fs.open;\n            this._queue.push([\n                this._open,\n                this.path,\n                this.flags,\n                this.mode,\n                undefined\n            ]);\n            this.flush();\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JhY2VmdWwtZnMvbGVnYWN5LXN0cmVhbXMuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLFNBQVNDLG9EQUF3QjtBQUVyQ0MsT0FBT0MsT0FBTyxHQUFHQztBQUVqQixTQUFTQSxPQUFRQyxFQUFFO0lBQ2pCLE9BQU87UUFDTEMsWUFBWUE7UUFDWkMsYUFBYUE7SUFDZjtJQUVBLFNBQVNELFdBQVlFLElBQUksRUFBRUMsT0FBTztRQUNoQyxJQUFJLENBQUUsS0FBSSxZQUFZSCxVQUFTLEdBQUksT0FBTyxJQUFJQSxXQUFXRSxNQUFNQztRQUUvRFQsT0FBT1UsSUFBSSxDQUFDLElBQUk7UUFFaEIsSUFBSUMsT0FBTyxJQUFJO1FBRWYsSUFBSSxDQUFDSCxJQUFJLEdBQUdBO1FBQ1osSUFBSSxDQUFDSSxFQUFFLEdBQUc7UUFDVixJQUFJLENBQUNDLFFBQVEsR0FBRztRQUNoQixJQUFJLENBQUNDLE1BQU0sR0FBRztRQUVkLElBQUksQ0FBQ0MsS0FBSyxHQUFHO1FBQ2IsSUFBSSxDQUFDQyxJQUFJLEdBQUcsS0FBSyxPQUFPO1FBQ3hCLElBQUksQ0FBQ0MsVUFBVSxHQUFHLEtBQUs7UUFFdkJSLFVBQVVBLFdBQVcsQ0FBQztRQUV0QiwwQkFBMEI7UUFDMUIsSUFBSVMsT0FBT0MsT0FBT0QsSUFBSSxDQUFDVDtRQUN2QixJQUFLLElBQUlXLFFBQVEsR0FBR0MsU0FBU0gsS0FBS0csTUFBTSxFQUFFRCxRQUFRQyxRQUFRRCxRQUFTO1lBQ2pFLElBQUlFLE1BQU1KLElBQUksQ0FBQ0UsTUFBTTtZQUNyQixJQUFJLENBQUNFLElBQUksR0FBR2IsT0FBTyxDQUFDYSxJQUFJO1FBQzFCO1FBRUEsSUFBSSxJQUFJLENBQUNDLFFBQVEsRUFBRSxJQUFJLENBQUNDLFdBQVcsQ0FBQyxJQUFJLENBQUNELFFBQVE7UUFFakQsSUFBSSxJQUFJLENBQUNFLEtBQUssS0FBS0MsV0FBVztZQUM1QixJQUFJLGFBQWEsT0FBTyxJQUFJLENBQUNELEtBQUssRUFBRTtnQkFDbEMsTUFBTUUsVUFBVTtZQUNsQjtZQUNBLElBQUksSUFBSSxDQUFDQyxHQUFHLEtBQUtGLFdBQVc7Z0JBQzFCLElBQUksQ0FBQ0UsR0FBRyxHQUFHQztZQUNiLE9BQU8sSUFBSSxhQUFhLE9BQU8sSUFBSSxDQUFDRCxHQUFHLEVBQUU7Z0JBQ3ZDLE1BQU1ELFVBQVU7WUFDbEI7WUFFQSxJQUFJLElBQUksQ0FBQ0YsS0FBSyxHQUFHLElBQUksQ0FBQ0csR0FBRyxFQUFFO2dCQUN6QixNQUFNLElBQUlFLE1BQU07WUFDbEI7WUFFQSxJQUFJLENBQUNDLEdBQUcsR0FBRyxJQUFJLENBQUNOLEtBQUs7UUFDdkI7UUFFQSxJQUFJLElBQUksQ0FBQ2IsRUFBRSxLQUFLLE1BQU07WUFDcEJvQixRQUFRQyxRQUFRLENBQUM7Z0JBQ2Z0QixLQUFLdUIsS0FBSztZQUNaO1lBQ0E7UUFDRjtRQUVBN0IsR0FBRzhCLElBQUksQ0FBQyxJQUFJLENBQUMzQixJQUFJLEVBQUUsSUFBSSxDQUFDTyxLQUFLLEVBQUUsSUFBSSxDQUFDQyxJQUFJLEVBQUUsU0FBVW9CLEdBQUcsRUFBRXhCLEVBQUU7WUFDekQsSUFBSXdCLEtBQUs7Z0JBQ1B6QixLQUFLMEIsSUFBSSxDQUFDLFNBQVNEO2dCQUNuQnpCLEtBQUtFLFFBQVEsR0FBRztnQkFDaEI7WUFDRjtZQUVBRixLQUFLQyxFQUFFLEdBQUdBO1lBQ1ZELEtBQUswQixJQUFJLENBQUMsUUFBUXpCO1lBQ2xCRCxLQUFLdUIsS0FBSztRQUNaO0lBQ0Y7SUFFQSxTQUFTM0IsWUFBYUMsSUFBSSxFQUFFQyxPQUFPO1FBQ2pDLElBQUksQ0FBRSxLQUFJLFlBQVlGLFdBQVUsR0FBSSxPQUFPLElBQUlBLFlBQVlDLE1BQU1DO1FBRWpFVCxPQUFPVSxJQUFJLENBQUMsSUFBSTtRQUVoQixJQUFJLENBQUNGLElBQUksR0FBR0E7UUFDWixJQUFJLENBQUNJLEVBQUUsR0FBRztRQUNWLElBQUksQ0FBQzBCLFFBQVEsR0FBRztRQUVoQixJQUFJLENBQUN2QixLQUFLLEdBQUc7UUFDYixJQUFJLENBQUNRLFFBQVEsR0FBRztRQUNoQixJQUFJLENBQUNQLElBQUksR0FBRyxLQUFLLE9BQU87UUFDeEIsSUFBSSxDQUFDdUIsWUFBWSxHQUFHO1FBRXBCOUIsVUFBVUEsV0FBVyxDQUFDO1FBRXRCLDBCQUEwQjtRQUMxQixJQUFJUyxPQUFPQyxPQUFPRCxJQUFJLENBQUNUO1FBQ3ZCLElBQUssSUFBSVcsUUFBUSxHQUFHQyxTQUFTSCxLQUFLRyxNQUFNLEVBQUVELFFBQVFDLFFBQVFELFFBQVM7WUFDakUsSUFBSUUsTUFBTUosSUFBSSxDQUFDRSxNQUFNO1lBQ3JCLElBQUksQ0FBQ0UsSUFBSSxHQUFHYixPQUFPLENBQUNhLElBQUk7UUFDMUI7UUFFQSxJQUFJLElBQUksQ0FBQ0csS0FBSyxLQUFLQyxXQUFXO1lBQzVCLElBQUksYUFBYSxPQUFPLElBQUksQ0FBQ0QsS0FBSyxFQUFFO2dCQUNsQyxNQUFNRSxVQUFVO1lBQ2xCO1lBQ0EsSUFBSSxJQUFJLENBQUNGLEtBQUssR0FBRyxHQUFHO2dCQUNsQixNQUFNLElBQUlLLE1BQU07WUFDbEI7WUFFQSxJQUFJLENBQUNDLEdBQUcsR0FBRyxJQUFJLENBQUNOLEtBQUs7UUFDdkI7UUFFQSxJQUFJLENBQUNlLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0MsTUFBTSxHQUFHLEVBQUU7UUFFaEIsSUFBSSxJQUFJLENBQUM3QixFQUFFLEtBQUssTUFBTTtZQUNwQixJQUFJLENBQUM4QixLQUFLLEdBQUdyQyxHQUFHOEIsSUFBSTtZQUNwQixJQUFJLENBQUNNLE1BQU0sQ0FBQ0UsSUFBSSxDQUFDO2dCQUFDLElBQUksQ0FBQ0QsS0FBSztnQkFBRSxJQUFJLENBQUNsQyxJQUFJO2dCQUFFLElBQUksQ0FBQ08sS0FBSztnQkFBRSxJQUFJLENBQUNDLElBQUk7Z0JBQUVVO2FBQVU7WUFDMUUsSUFBSSxDQUFDa0IsS0FBSztRQUNaO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2hzMTEvLi9ub2RlX21vZHVsZXMvZ3JhY2VmdWwtZnMvbGVnYWN5LXN0cmVhbXMuanM/MWVhOCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJykuU3RyZWFtXG5cbm1vZHVsZS5leHBvcnRzID0gbGVnYWN5XG5cbmZ1bmN0aW9uIGxlZ2FjeSAoZnMpIHtcbiAgcmV0dXJuIHtcbiAgICBSZWFkU3RyZWFtOiBSZWFkU3RyZWFtLFxuICAgIFdyaXRlU3RyZWFtOiBXcml0ZVN0cmVhbVxuICB9XG5cbiAgZnVuY3Rpb24gUmVhZFN0cmVhbSAocGF0aCwgb3B0aW9ucykge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZWFkU3RyZWFtKSkgcmV0dXJuIG5ldyBSZWFkU3RyZWFtKHBhdGgsIG9wdGlvbnMpO1xuXG4gICAgU3RyZWFtLmNhbGwodGhpcyk7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICB0aGlzLnBhdGggPSBwYXRoO1xuICAgIHRoaXMuZmQgPSBudWxsO1xuICAgIHRoaXMucmVhZGFibGUgPSB0cnVlO1xuICAgIHRoaXMucGF1c2VkID0gZmFsc2U7XG5cbiAgICB0aGlzLmZsYWdzID0gJ3InO1xuICAgIHRoaXMubW9kZSA9IDQzODsgLyo9MDY2NiovXG4gICAgdGhpcy5idWZmZXJTaXplID0gNjQgKiAxMDI0O1xuXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAvLyBNaXhpbiBvcHRpb25zIGludG8gdGhpc1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gICAgZm9yICh2YXIgaW5kZXggPSAwLCBsZW5ndGggPSBrZXlzLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2luZGV4XTtcbiAgICAgIHRoaXNba2V5XSA9IG9wdGlvbnNba2V5XTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5lbmNvZGluZykgdGhpcy5zZXRFbmNvZGluZyh0aGlzLmVuY29kaW5nKTtcblxuICAgIGlmICh0aGlzLnN0YXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICgnbnVtYmVyJyAhPT0gdHlwZW9mIHRoaXMuc3RhcnQpIHtcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKCdzdGFydCBtdXN0IGJlIGEgTnVtYmVyJyk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5lbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLmVuZCA9IEluZmluaXR5O1xuICAgICAgfSBlbHNlIGlmICgnbnVtYmVyJyAhPT0gdHlwZW9mIHRoaXMuZW5kKSB7XG4gICAgICAgIHRocm93IFR5cGVFcnJvcignZW5kIG11c3QgYmUgYSBOdW1iZXInKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuc3RhcnQgPiB0aGlzLmVuZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3N0YXJ0IG11c3QgYmUgPD0gZW5kJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucG9zID0gdGhpcy5zdGFydDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5mZCAhPT0gbnVsbCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZi5fcmVhZCgpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZnMub3Blbih0aGlzLnBhdGgsIHRoaXMuZmxhZ3MsIHRoaXMubW9kZSwgZnVuY3Rpb24gKGVyciwgZmQpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgc2VsZi5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgICAgIHNlbGYucmVhZGFibGUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzZWxmLmZkID0gZmQ7XG4gICAgICBzZWxmLmVtaXQoJ29wZW4nLCBmZCk7XG4gICAgICBzZWxmLl9yZWFkKCk7XG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIFdyaXRlU3RyZWFtIChwYXRoLCBvcHRpb25zKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFdyaXRlU3RyZWFtKSkgcmV0dXJuIG5ldyBXcml0ZVN0cmVhbShwYXRoLCBvcHRpb25zKTtcblxuICAgIFN0cmVhbS5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgICB0aGlzLmZkID0gbnVsbDtcbiAgICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcblxuICAgIHRoaXMuZmxhZ3MgPSAndyc7XG4gICAgdGhpcy5lbmNvZGluZyA9ICdiaW5hcnknO1xuICAgIHRoaXMubW9kZSA9IDQzODsgLyo9MDY2NiovXG4gICAgdGhpcy5ieXRlc1dyaXR0ZW4gPSAwO1xuXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAvLyBNaXhpbiBvcHRpb25zIGludG8gdGhpc1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gICAgZm9yICh2YXIgaW5kZXggPSAwLCBsZW5ndGggPSBrZXlzLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2luZGV4XTtcbiAgICAgIHRoaXNba2V5XSA9IG9wdGlvbnNba2V5XTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zdGFydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoJ251bWJlcicgIT09IHR5cGVvZiB0aGlzLnN0YXJ0KSB7XG4gICAgICAgIHRocm93IFR5cGVFcnJvcignc3RhcnQgbXVzdCBiZSBhIE51bWJlcicpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc3RhcnQgPCAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignc3RhcnQgbXVzdCBiZSA+PSB6ZXJvJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucG9zID0gdGhpcy5zdGFydDtcbiAgICB9XG5cbiAgICB0aGlzLmJ1c3kgPSBmYWxzZTtcbiAgICB0aGlzLl9xdWV1ZSA9IFtdO1xuXG4gICAgaWYgKHRoaXMuZmQgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuX29wZW4gPSBmcy5vcGVuO1xuICAgICAgdGhpcy5fcXVldWUucHVzaChbdGhpcy5fb3BlbiwgdGhpcy5wYXRoLCB0aGlzLmZsYWdzLCB0aGlzLm1vZGUsIHVuZGVmaW5lZF0pO1xuICAgICAgdGhpcy5mbHVzaCgpO1xuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbIlN0cmVhbSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwibGVnYWN5IiwiZnMiLCJSZWFkU3RyZWFtIiwiV3JpdGVTdHJlYW0iLCJwYXRoIiwib3B0aW9ucyIsImNhbGwiLCJzZWxmIiwiZmQiLCJyZWFkYWJsZSIsInBhdXNlZCIsImZsYWdzIiwibW9kZSIsImJ1ZmZlclNpemUiLCJrZXlzIiwiT2JqZWN0IiwiaW5kZXgiLCJsZW5ndGgiLCJrZXkiLCJlbmNvZGluZyIsInNldEVuY29kaW5nIiwic3RhcnQiLCJ1bmRlZmluZWQiLCJUeXBlRXJyb3IiLCJlbmQiLCJJbmZpbml0eSIsIkVycm9yIiwicG9zIiwicHJvY2VzcyIsIm5leHRUaWNrIiwiX3JlYWQiLCJvcGVuIiwiZXJyIiwiZW1pdCIsIndyaXRhYmxlIiwiYnl0ZXNXcml0dGVuIiwiYnVzeSIsIl9xdWV1ZSIsIl9vcGVuIiwicHVzaCIsImZsdXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/graceful-fs/legacy-streams.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/graceful-fs/polyfills.js":
/*!***********************************************!*\
  !*** ./node_modules/graceful-fs/polyfills.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar constants = __webpack_require__(/*! constants */ \"constants\");\nvar origCwd = process.cwd;\nvar cwd = null;\nvar platform = process.env.GRACEFUL_FS_PLATFORM || process.platform;\nprocess.cwd = function() {\n    if (!cwd) cwd = origCwd.call(process);\n    return cwd;\n};\ntry {\n    process.cwd();\n} catch (er) {}\n// This check is needed until node.js 12 is required\nif (typeof process.chdir === \"function\") {\n    var chdir = process.chdir;\n    process.chdir = function(d) {\n        cwd = null;\n        chdir.call(process, d);\n    };\n    if (Object.setPrototypeOf) Object.setPrototypeOf(process.chdir, chdir);\n}\nmodule.exports = patch;\nfunction patch(fs) {\n    // (re-)implement some things that are known busted or missing.\n    // lchmod, broken prior to 0.6.2\n    // back-port the fix here.\n    if (constants.hasOwnProperty(\"O_SYMLINK\") && process.version.match(/^v0\\.6\\.[0-2]|^v0\\.5\\./)) {\n        patchLchmod(fs);\n    }\n    // lutimes implementation, or no-op\n    if (!fs.lutimes) {\n        patchLutimes(fs);\n    }\n    // https://github.com/isaacs/node-graceful-fs/issues/4\n    // Chown should not fail on einval or eperm if non-root.\n    // It should not fail on enosys ever, as this just indicates\n    // that a fs doesn't support the intended operation.\n    fs.chown = chownFix(fs.chown);\n    fs.fchown = chownFix(fs.fchown);\n    fs.lchown = chownFix(fs.lchown);\n    fs.chmod = chmodFix(fs.chmod);\n    fs.fchmod = chmodFix(fs.fchmod);\n    fs.lchmod = chmodFix(fs.lchmod);\n    fs.chownSync = chownFixSync(fs.chownSync);\n    fs.fchownSync = chownFixSync(fs.fchownSync);\n    fs.lchownSync = chownFixSync(fs.lchownSync);\n    fs.chmodSync = chmodFixSync(fs.chmodSync);\n    fs.fchmodSync = chmodFixSync(fs.fchmodSync);\n    fs.lchmodSync = chmodFixSync(fs.lchmodSync);\n    fs.stat = statFix(fs.stat);\n    fs.fstat = statFix(fs.fstat);\n    fs.lstat = statFix(fs.lstat);\n    fs.statSync = statFixSync(fs.statSync);\n    fs.fstatSync = statFixSync(fs.fstatSync);\n    fs.lstatSync = statFixSync(fs.lstatSync);\n    // if lchmod/lchown do not exist, then make them no-ops\n    if (fs.chmod && !fs.lchmod) {\n        fs.lchmod = function(path, mode, cb) {\n            if (cb) process.nextTick(cb);\n        };\n        fs.lchmodSync = function() {};\n    }\n    if (fs.chown && !fs.lchown) {\n        fs.lchown = function(path, uid, gid, cb) {\n            if (cb) process.nextTick(cb);\n        };\n        fs.lchownSync = function() {};\n    }\n    // on Windows, A/V software can lock the directory, causing this\n    // to fail with an EACCES or EPERM if the directory contains newly\n    // created files.  Try again on failure, for up to 60 seconds.\n    // Set the timeout this long because some Windows Anti-Virus, such as Parity\n    // bit9, may lock files for up to a minute, causing npm package install\n    // failures. Also, take care to yield the scheduler. Windows scheduling gives\n    // CPU to a busy looping process, which can cause the program causing the lock\n    // contention to be starved of CPU by node, so the contention doesn't resolve.\n    if (platform === \"win32\") {\n        fs.rename = typeof fs.rename !== \"function\" ? fs.rename : function(fs$rename) {\n            function rename(from, to, cb) {\n                var start = Date.now();\n                var backoff = 0;\n                fs$rename(from, to, function CB(er) {\n                    if (er && (er.code === \"EACCES\" || er.code === \"EPERM\" || er.code === \"EBUSY\") && Date.now() - start < 60000) {\n                        setTimeout(function() {\n                            fs.stat(to, function(stater, st) {\n                                if (stater && stater.code === \"ENOENT\") fs$rename(from, to, CB);\n                                else cb(er);\n                            });\n                        }, backoff);\n                        if (backoff < 100) backoff += 10;\n                        return;\n                    }\n                    if (cb) cb(er);\n                });\n            }\n            if (Object.setPrototypeOf) Object.setPrototypeOf(rename, fs$rename);\n            return rename;\n        }(fs.rename);\n    }\n    // if read() returns EAGAIN, then just try it again.\n    fs.read = typeof fs.read !== \"function\" ? fs.read : function(fs$read) {\n        function read(fd, buffer, offset, length, position, callback_) {\n            var callback;\n            if (callback_ && typeof callback_ === \"function\") {\n                var eagCounter = 0;\n                callback = function(er, _, __) {\n                    if (er && er.code === \"EAGAIN\" && eagCounter < 10) {\n                        eagCounter++;\n                        return fs$read.call(fs, fd, buffer, offset, length, position, callback);\n                    }\n                    callback_.apply(this, arguments);\n                };\n            }\n            return fs$read.call(fs, fd, buffer, offset, length, position, callback);\n        }\n        // This ensures `util.promisify` works as it does for native `fs.read`.\n        if (Object.setPrototypeOf) Object.setPrototypeOf(read, fs$read);\n        return read;\n    }(fs.read);\n    fs.readSync = typeof fs.readSync !== \"function\" ? fs.readSync : function(fs$readSync) {\n        return function(fd, buffer, offset, length, position) {\n            var eagCounter = 0;\n            while(true){\n                try {\n                    return fs$readSync.call(fs, fd, buffer, offset, length, position);\n                } catch (er) {\n                    if (er.code === \"EAGAIN\" && eagCounter < 10) {\n                        eagCounter++;\n                        continue;\n                    }\n                    throw er;\n                }\n            }\n        };\n    }(fs.readSync);\n    function patchLchmod(fs) {\n        fs.lchmod = function(path, mode, callback) {\n            fs.open(path, constants.O_WRONLY | constants.O_SYMLINK, mode, function(err, fd) {\n                if (err) {\n                    if (callback) callback(err);\n                    return;\n                }\n                // prefer to return the chmod error, if one occurs,\n                // but still try to close, and report closing errors if they occur.\n                fs.fchmod(fd, mode, function(err) {\n                    fs.close(fd, function(err2) {\n                        if (callback) callback(err || err2);\n                    });\n                });\n            });\n        };\n        fs.lchmodSync = function(path, mode) {\n            var fd = fs.openSync(path, constants.O_WRONLY | constants.O_SYMLINK, mode);\n            // prefer to return the chmod error, if one occurs,\n            // but still try to close, and report closing errors if they occur.\n            var threw = true;\n            var ret;\n            try {\n                ret = fs.fchmodSync(fd, mode);\n                threw = false;\n            } finally{\n                if (threw) {\n                    try {\n                        fs.closeSync(fd);\n                    } catch (er) {}\n                } else {\n                    fs.closeSync(fd);\n                }\n            }\n            return ret;\n        };\n    }\n    function patchLutimes(fs) {\n        if (constants.hasOwnProperty(\"O_SYMLINK\") && fs.futimes) {\n            fs.lutimes = function(path, at, mt, cb) {\n                fs.open(path, constants.O_SYMLINK, function(er, fd) {\n                    if (er) {\n                        if (cb) cb(er);\n                        return;\n                    }\n                    fs.futimes(fd, at, mt, function(er) {\n                        fs.close(fd, function(er2) {\n                            if (cb) cb(er || er2);\n                        });\n                    });\n                });\n            };\n            fs.lutimesSync = function(path, at, mt) {\n                var fd = fs.openSync(path, constants.O_SYMLINK);\n                var ret;\n                var threw = true;\n                try {\n                    ret = fs.futimesSync(fd, at, mt);\n                    threw = false;\n                } finally{\n                    if (threw) {\n                        try {\n                            fs.closeSync(fd);\n                        } catch (er) {}\n                    } else {\n                        fs.closeSync(fd);\n                    }\n                }\n                return ret;\n            };\n        } else if (fs.futimes) {\n            fs.lutimes = function(_a, _b, _c, cb) {\n                if (cb) process.nextTick(cb);\n            };\n            fs.lutimesSync = function() {};\n        }\n    }\n    function chmodFix(orig) {\n        if (!orig) return orig;\n        return function(target, mode, cb) {\n            return orig.call(fs, target, mode, function(er) {\n                if (chownErOk(er)) er = null;\n                if (cb) cb.apply(this, arguments);\n            });\n        };\n    }\n    function chmodFixSync(orig) {\n        if (!orig) return orig;\n        return function(target, mode) {\n            try {\n                return orig.call(fs, target, mode);\n            } catch (er) {\n                if (!chownErOk(er)) throw er;\n            }\n        };\n    }\n    function chownFix(orig) {\n        if (!orig) return orig;\n        return function(target, uid, gid, cb) {\n            return orig.call(fs, target, uid, gid, function(er) {\n                if (chownErOk(er)) er = null;\n                if (cb) cb.apply(this, arguments);\n            });\n        };\n    }\n    function chownFixSync(orig) {\n        if (!orig) return orig;\n        return function(target, uid, gid) {\n            try {\n                return orig.call(fs, target, uid, gid);\n            } catch (er) {\n                if (!chownErOk(er)) throw er;\n            }\n        };\n    }\n    function statFix(orig) {\n        if (!orig) return orig;\n        // Older versions of Node erroneously returned signed integers for\n        // uid + gid.\n        return function(target, options, cb) {\n            if (typeof options === \"function\") {\n                cb = options;\n                options = null;\n            }\n            function callback(er, stats) {\n                if (stats) {\n                    if (stats.uid < 0) stats.uid += 0x100000000;\n                    if (stats.gid < 0) stats.gid += 0x100000000;\n                }\n                if (cb) cb.apply(this, arguments);\n            }\n            return options ? orig.call(fs, target, options, callback) : orig.call(fs, target, callback);\n        };\n    }\n    function statFixSync(orig) {\n        if (!orig) return orig;\n        // Older versions of Node erroneously returned signed integers for\n        // uid + gid.\n        return function(target, options) {\n            var stats = options ? orig.call(fs, target, options) : orig.call(fs, target);\n            if (stats) {\n                if (stats.uid < 0) stats.uid += 0x100000000;\n                if (stats.gid < 0) stats.gid += 0x100000000;\n            }\n            return stats;\n        };\n    }\n    // ENOSYS means that the fs doesn't support the op. Just ignore\n    // that, because it doesn't matter.\n    //\n    // if there's no getuid, or if getuid() is something other\n    // than 0, and the error is EINVAL or EPERM, then just ignore\n    // it.\n    //\n    // This specific case is a silent failure in cp, install, tar,\n    // and most other unix tools that manage permissions.\n    //\n    // When running as root, or if other types of errors are\n    // encountered, then it's strict.\n    function chownErOk(er) {\n        if (!er) return true;\n        if (er.code === \"ENOSYS\") return true;\n        var nonroot = !process.getuid || process.getuid() !== 0;\n        if (nonroot) {\n            if (er.code === \"EINVAL\" || er.code === \"EPERM\") return true;\n        }\n        return false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/graceful-fs/polyfills.js\n");

/***/ })

};
;